// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:123456@localhost:3306/mini_project"
}

enum Role {
  Author
  Admin
}

enum Category {
  Health
  Sport
  Tech
  Science
}

enum TicketType {
  Free
  Paid
}

enum TransactionStatus {
  Created 
  Paid
  Cancelled
}

enum Review {
  VeryBad 
  Normal
  Good
  VeryGood 
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(Author)
  isVerify  Boolean  @default(false)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String
  category  Category
  content   String   @db.LongText
  image     String
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  location  String
  price     Int
  type      TicketType @default(Free)
  eventDateTime DateTime?
  availableSeats Int @default(0)

  author Author @relation(fields: [authorId], references: [id])
  

}

  model Voucher {
    id        Int      @id @default(autoincrement())
    name      String
    code      String
    startDate DateTime?
    endDate   DateTime?
    availableFor  Int 
    discount  Int
  }

  model Transaction {
    id      Int @id @default(autoincrement())
    name  String 
    status  TransactionStatus 
    idBlog   Int @default(0)
    quantity  Int @default(1)
    createdAt DateTime @default(now())  
    amount  Int @default(0)
    voucher Int @default(0)
    totalPaid Int @default(0)
  }

model Post {
    id   Int @id @default(autoincrement())
    title String
    content String
    createdAt DateTime @default(now())  
}

model Reviews {
  id Int @id @default(autoincrement())
  name  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review  Review
}

  

